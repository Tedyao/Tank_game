#include "Class_Map.h"



Class_Map::Class_Map()
{
	loadmap();
}

void Class_Map::loadmap(unsigned int stage)
{
	MapInt testMap[map_row][map_col] = {
		0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,
		0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x22,0x22,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x22,0x22,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x22,0x22,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x22,0x22,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x10,0x10,0x0F,0x0F,0x00,0x00,0x22,0x22,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x10,0x10,0x0F,0x0F,0x00,0x00,0x22,0x22,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x22,0x22,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x22,0x22,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x22,0x22,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x11,0x11,0x11,0x11,
		0x11,0x11,0x10,0x10,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x10,0x10,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x0F,0x0F,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xC8,0xCA,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xC9,0xCB,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x11,
		0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,
		0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11
	};

	for (int i = 0; i < map_row; i++)
	{
		for (int j = 0; j < map_col; j++)
		{
			this->map[i][j] = testMap[i][j];
		}
	}

	loadMapPic(Map_FileName);


}

void Class_Map::loadMapPic(const wchar_t* const picPath[7])
{
	for (int i = 0; i < 7; i++)
	{
		loadimage(&this->map_pic[i], picPath[i], map_px, map_px);
	}
}

void Class_Map::show()
{
	static DWORD sea_timer = timeGetTime();
	static Int sea_count = 0;
	for (int i = 0; i < map_row; i++)
	{
		for (int j = 0; j < map_col; j++)
		{
			//putimage(i, j, &this->map_pic[this->getVal({ i, j })], );
			switch (this->map[i][j])
			{
			case WALL_UL:
				putimage(j * map_px, i * map_px, map_px / 2, map_px / 2, &map_pic[FileNum_wall], 0, 0);
				break;
			case WALL_UR:
				putimage(j * map_px + map_px / 2, i * map_px, map_px / 2, map_px / 2, &map_pic[FileNum_wall], map_px / 2, 0);
				break;
			case WALL_DL:
				putimage(j * map_px, i * map_px + map_px / 2, map_px / 2, map_px / 2, &map_pic[FileNum_wall], 0, map_px / 2);
				break;
			case WALL_DR:
				putimage(j * map_px + map_px / 2, i * map_px + map_px / 2, map_px / 2, map_px / 2, &map_pic[FileNum_wall], map_px / 2, map_px / 2);
				break;
			case WALL_UP:
				putimage(j * map_px, i * map_px, map_px, map_px / 2, &map_pic[FileNum_wall], 0, 0);
				break;
			case WALL_LEFT:
				putimage(j * map_px, i * map_px, map_px / 2, map_px, &map_pic[FileNum_wall], 0, 0);
				break;
			case WALL_RIGHT:
				putimage(j * map_px + map_px / 2, i * map_px, map_px / 2, map_px, &map_pic[FileNum_wall], map_px / 2, 0);
				break;
			case WALL_DOWN:
				putimage(j * map_px, i * map_px + map_px / 2, map_px, map_px / 2, &map_pic[FileNum_wall], 0, map_px / 2);
				break;
			case WALL:
				putimage(j * map_px, i * map_px, &map_pic[FileNum_wall]);
				break;
			case IRON:
				putimage(j * map_px, i * map_px, &map_pic[FileNum_iron]);
				break;
			case BORDER:
				putimage(j * map_px, i * map_px, &map_pic[FileNum_border]);
				break;
			case SEA:
				if (timeGetTime() - sea_timer > 1000)
				{
					sea_count++;
					sea_timer = timeGetTime();
				}
				putimage(j * map_px, i * map_px, &map_pic[FileNum_sea0 + (sea_count % 2)]);
				break;
			case ICE:
				putimage(j * map_px, i * map_px, &map_pic[FileNum_ice]);//´ýÐÞÕý
				break;
			case JUNGLE:
				//putimage(j * map_px, i * map_px, &map_pic[FileNum_jungle]);
				break;
			default:
				break;
			}
		}
	}
}

void Class_Map::show_tree()
{
	static DWORD sea_timer = timeGetTime();
	static Int sea_count = 0;
	for (int i = 0; i < map_row; i++)
	{
		for (int j = 0; j < map_col; j++)
		{
			//putimage(i, j, &this->map_pic[this->getVal({ i, j })], );
			switch (this->map[i][j])
			{
			case JUNGLE:
				putimage(j * map_px, i * map_px, &map_pic[FileNum_jungle]);
				break;
			default:
				break;
			}
		}
	}
}

